"""
This file contains performance tests used for tuning the performance of the poetry analyser program.

Usage:
Change NUMBER_OF_LINES to set the number of lines of random text generated.
Use your favourite profiler/timing tool to measure the amount of time it takes for this program to
run.

This does not run when `pytest` is invoked because it takes too long to run.
For example, if NUMBER_OF_LINES is set to 100, this program can take ~20 minutes to run.
"""

import random
from poetry_analyser.Model import *
from poetry_analyser.Utils import *
from utils import generate_model

text = nltk.corpus.brown.words()
bigrams = nltk.bigrams(text)
cfd = nltk.ConditionalFreqDist(bigrams)  # bigram-condition

model = Model()

# Modify this value to change the number of lines generated by the model
NUMBER_OF_LINES = 1

out = ""
for i in range(NUMBER_OF_LINES):
    out += generate_model(cfd, random.choice(list(text)))


def test_n10():
    model.poem_injection(out)
    assert model.get_rhyme_scheme() == model.get_rhyme_scheme()


def test_n100():
    model.poem_injection(out)
    assert model.get_rhyme_scheme() == model.get_rhyme_scheme()


def test_n1000():
    model.poem_injection(out)
    assert model.get_rhyme_scheme() == model.get_rhyme_scheme()

